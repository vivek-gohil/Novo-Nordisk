Object Oriented Programming

What is Class ?
	Blueprint to create object.


class Employee {
	//Variables
	int employeeId
	String firstName
	String lastName
	float salary

	//Function
	calculateSalary() {
		basic + HRA + Travel
	}
}

class Account {
	accountNumber
	name
	branch
	ifsc
	balance
}

What is Object ? 

Employee ramya = new Employee();
ramya.employeeId = 101
ramya.firstName = Ramya
ramya.lastName = ...
ramya.salary = 9999999

Data Types In Java
1. Primitive Data Types - Call By Value
	byte
	char
	int
	long
	float
	double
	boolean
	
	int employeeId = 101;
	int employeeId = new int(); //Error 
2. Non-Primitive/ Reference Type - Call By Refernce
	String
	Array
	Class
	Interface
	Collections 

	String firstName = new String("Novo Nordisk");


class AdditionMain {

	public static void main(String args[]) {
		//accept two number 

		//declaration
		int n1,n2;
		
		//initialization
		n1 = 10;
		n2 = 20;
		
		Addition addObject = new Addition();
		addObject.accept(n1,n2);
		
	
	}
}

domain
class Addition {	
	public void accept(int n1 , int n2){
		sysout(n1); // 10
		sysout(n2); // 20
	}

}


Create two classes as 
	Circle and CircleMain
Circle ::
	Create a method/function as area which accept radius as parameter
	and print area of circle (3.14 * r * r)

CircleMain ::
	Call area function by creating object of Circle class.



Create class Account and AccountMain

Account 
	display(int accountNumber,String name,double balance)
	{
		//display accountNumber
		//display name
		//display balance
	}

AccountMain
	main method
		declare 3 variables for accountNumber,name,balance
		Create object of Scanner class
		accept account number
		accept name
		accept balance
		Create object of Account class and call display method











Post Lunch :: 1:15 PM 

1. Accept value from user - Scanner Class
2. Functions 
	a. Function With Parameter
	b. Function With Return Type
3. Condition Statements
	a. If Else
	b. Nested If
	c. Switch Case

class NumberUtil {
	public int getSquareOfNumber(int number){
		int result = number * number;
		return result;
	}
}
class NumberUtilMain {
	public static void main(String args[]) {
		
		int number;
		Sysout("Enter number");
		Scanner scanner = new Scanner(System.in);
		number = scanner.nextInt(); //3

		NumberUtil numberUtil = new NumberUtil();
		int output = numberUtil.getSquareOfNumber(number);
		Sysout("Result " + output);
	}
}












int number = 10;

if(number%2 == 0) {
	Sysout("Even Number") 
}
else
	Sysout("Odd Number")




Operators
And = && 
	T && T = T
	T && F = F 
OR = ||
	T || T = T
	T || F = T 

Not = !


LoginDetails and LoginDetailsMain

LoginDetails
	
	public boolean validate(String username,String password) {
		if(username.equals("admin") && password.equals("admin@123")
			return true;
		else
			return false
	}












LoginDetailsMain
	1. Declare Two variables for username and password
	2. Create Scanner class object
	3. Accept username and password from user
	4. Create object of LoginDetails class and call validate method
	5. if validate method return true the print login successful
	   else print login failed.



NumberUtil and NumberUtilMain

NumberUtil 
	public int getLargest(int n1 ,int n2,int n3){
		//logic
		if ( (n1>n2) && (n1>n3) )
		if n1 is greater than n2 and n3 
			return n1;
		if n2 is greater than n1 and n3
			return n2;
		else 
			return n3;
	}

https://github.com/vivek-gohil/Novo-Nordisk

1. Inheritance
2. Polymorphism
3. Abstract Class and Methods
4. Interface
5. Exception Handling







Constructors = Object Creation
0. To initialize the value to variables of class.
1. It has a same name as of class.
2. It will get called automatically , at the time of object creation.
3. It dose not have return type.

class Demo {
	public Demo() {
		Sysout("In Constructor");
	}

	public void greet(){
		Sysout("Hi")
	}
}
class DemoMain {
	main() {
		Demo demo = new Demo();//In Constructor
		demo.greet(); //Hi

		Demo demo2 = new Demo(); // In Constructor
	}
}










Notes For Creating Domain Class
	1. Variables	
	2. Default Constructor
	3. Parameter Constructor
	4. Setter
	5. Getter

Loops
	1. Do While
	2. While
	3. For
	4. For Each
Array


Do While

do 
{
	//code
}
while(condition);

While

while(condition) {
	//code
}


Choose Your Format
1. Download PFD
2. Download XLS
3. Download CSV
Enter your choice
<choice>







class Shape {
	draw() {
		drawing shape
	}
}

class Triangle extends Shape {
	draw() {
		drawing triangle
	}
}
class Circle extends Shape {
	draw() {
		drawing circle
	}
}

main() {
	Shape shape = null;
	...
	shape = new Circle();
	shape.draw();

}





class A {
	public void greet() {
		Hi
	}
}
class B extends A {
	public void greet() {
		Hello
	}
}
class MyMain {
	main() {
		A a = new B();
		a.greet();
	}
}
Abstract Class and Method

Why Abstract Class ?

Abstract class Account {
	private int accountNumber;

	public abstract void withdraw(double amount);

	public abstract void deposit(double amount);

	public int getAccountNumber() {
		return accountNumber;
	}
	public void setAccountNumber(int accountNumber)	{
		this.accountNumber = accountNumber;
	}
}

class Savings extends Account {
	withdraw
	deposit
}








class Savings extends Account {


}


























abstract class Shape {
		public void greet()  {
		Hi
	}

}

class Line extends Shape{
	public void draw() {
		...
	}
}
class Triangle exnteds Shape {
	public void draw() {
		
	}
}
class Circle {
}









ShapeMain {
	main() {
		Shape shape = new Shape() // Error
	}
}








A {

}
B  {

}
C extends A  {
	
}































abstract class A {
	public abstract void print();
}


abstract class Demo {
	public void show() {
		"Hi"
	}
	public void print() {
		"Hello"
	}
	public abstract void greet();
}
class MyClass extends Demo {
	public void show() {
		"Good Morning"
	}
	public void greet() {
		"Good Evening"
	}
}

abstract class MyClass {
	public abstract void print();
	public abstract void display();
}
class Demo extends MyClass {
	public void greet() {
		
	}
	public void print() {
		"Hi"
	}
	public void display() {
		"Hello"
	}

}
class User extends MyClass {
	public void print() {
		"Good Morning"
	}

	public void display() {
		"Good Afternoon"
	}
}





abstract A {
	public abstract void print();
	public abstract void show();
	public abstract void display();
}
class B extends A {
	public void print() {
		Hi
	}
	public void show() {
	}
	public void display() {
	}
}




Interface - Pure Abstract

public Interface MyInterface {
	void print();
}
public Interface Demo {
	void show()
}

public Interface Greet {
	void display();
}

class MyClass implements MyInterface {
	public void print() {
		Hi
	}
}

class User implements Greet , Demo {
	public void show() {
		Hi
	}
	public void display() {
		Hi
	}


}












interface A {
	void print();
}
interface B {
	void show();
}
class Demo implements A , B {
	public void print() {
		"Hi"
	}
}


Exception Handling







1. Call By Value
2. Call By Reference

class MyClass {
	private int x = 10;	
	public void setX(int x){
		this.x = x;
	}
	public int getX() {
		return x;
	}
}
main() {	
	MyClass myClass = new MyClass();
	int x=15;
	Sysout(myClass.getX());
	Sysout(x);
}

class MyClass {
	private int[] data;
	
	public void setData(int[] data) {
		this.data = data;
	}
	
	public int[] getData() {
		return data;
	}
}
main() {
	MyClass myClass = new MyClass();
	int [] numbers = new int[3];
	numbers[0] = 11;
	numbers[1] = 12;
	numbers[2] = 13;
}




class MyClass {
	private int [] data; // [10,11,12]
	private double x; //0.0
	
	public int[] getData()
		return data;

	public void setData(int [] data) 
		this.data = data;

	public int getX()
		return x;

	public void setX(int x)
		this.x=x
}

Collections Vs Arrays

Collections = Dynamic in size.

Youtube 
Core Java :: https://www.youtube.com/watch?v=bm0OyhwFDuY&list=PLsyeobzWxl7pe_IiTfNyr55kwJPWbgxB5

Spring and Spring Boot :: https://www.youtube.com/@Java.Brains/playlists

https://www.javatpoint.com/java-tutorial












